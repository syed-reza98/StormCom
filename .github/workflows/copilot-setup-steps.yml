name: "Copilot Setup Steps"

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node 22 (upgrade npm to 11 as required by engines)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Use npm 11
        run: npm i -g npm@11

      - name: Copy env file
        run: |
          if [ -f ".env.example" ]; then
            cp .env.example .env
          fi

      - name: Install OS packages (Playwright/Next image pipeline)
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk1.0-0 libatk-bridge2.0-0 \
            libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 \
            libasound2 libxshmfence1 libpangocairo-1.0-0 libx11-xcb1 \
            libpango-1.0-0 libcups2 libx11-6 libxext6 libxrender1 \
            libxi6 libxtst6 libdrm2 libdbus-1-3 libgtk-3-0 libvips

      - name: Install dependencies
        run: npm ci

      # ---------- Prisma + SQLite ----------
      - name: Generate Prisma client (SQLite)
        env:
          DATABASE_URL: "file:./dev.db"
        run: |
          mkdir -p prisma
          npx prisma generate

      - name: Apply migrations (create prisma/dev.db if needed)
        env:
          DATABASE_URL: "file:./dev.db"
        run: |
          if [ -f "prisma/schema.prisma" ]; then
            npx prisma migrate deploy || true
          fi

      - name: Seed database (uses your npm script)
        env:
          DATABASE_URL: "file:./dev.db"
        run: |
          if [ -f "prisma/seed.ts" ]; then
            npm run db:seed || (npx tsx prisma/seed.ts || npx ts-node prisma/seed.ts || npx prisma db seed)
          else
            echo "No prisma/seed.ts found; skipping."
          fi

      # ---------- Type checking ----------
      - name: Type check
        run: npm run type-check

      - name: Save type-check errors to JSON (PowerShell script)
        run: |
          # Try your exact script (calls `powershell ...`), then fall back to pwsh
          npm run type-check:save || pwsh -File ./scripts/collect-type-errors.ps1
        shell: bash

      # ---------- Playwright MCP ----------
      - name: Install Playwright browsers (+ deps)
        if: ${{ hashFiles('playwright.config.*') != '' || hashFiles('.playwright-mcp/**') != '' }}
        run: npx playwright install --with-deps

      - name: Cache Playwright browsers
        if: ${{ hashFiles('playwright.config.*') != '' || hashFiles('.playwright-mcp/**') != '' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('playwright.config.*', '.playwright-mcp/**') }}

      # ---------- Next.js MCP warm start ----------
      - name: Warm-start Next.js dev server (time-boxed)
        env:
          NODE_ENV: development
        run: |
          (npm run dev & echo $! > /tmp/next_pid) || true
          sleep 15 || true
          if [ -f /tmp/next_pid ]; then
            kill $(cat /tmp/next_pid) || true
          fi

      # ---------- Optional caches ----------
      - name: Cache Next.js build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-next-
